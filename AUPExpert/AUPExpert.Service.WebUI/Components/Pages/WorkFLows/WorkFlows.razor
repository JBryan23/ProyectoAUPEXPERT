@page "/WorkFlows/workflows"
@using AUPExpert.Application.DTO
@using System.ComponentModel.DataAnnotations
@using AUPExpert.Service.WebUI.Services.WorkFlows

@inject WorkFlowService _workFlowService

<PageTitle>Formulario de Flujos de Datos</PageTitle>
<MudStack Class="pa-3" Justify="Justify.Center" AlignItems="AlignItems.Center" Style="height:100%;">
    <MudGrid>
        <MudItem xs="12" sm="5">
            <MudPaper Class="pa-4" Elevation="3">
                <MudForm Model="workFlowDto" @ref="form" @bind-IsValid="@success" Spacing="6">
                    <MudText Typo="Typo.h6" Align="Align.Center">Flujo de Trabajo</MudText>

                    <MudTextField T="string" Label="Nombre" @bind-Value="workFlowDto.Name" Required="true" RequiredError="El nombre de flujo de trabajo es requerido!"
                                  Validation="@(new LengthAttribute(3, 100){ErrorMessage="El flujo de trabajo debe contener entre [3,100] caracteres!"})" />

                    <MudTextField T="string" Label="Descripción" @bind-Value="workFlowDto.Description" AutoGrow="true" Required="true" RequiredError="La descripción del flujo de trabajo es requerida!" />

                    <MudStack Row="true" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                            <MudTooltip Text="Validar Datos De Campos">
                                <MudIconButton Icon="@Icons.Material.Rounded.CheckCircle" Variant="Variant.Filled" Color="Color.Primary" DropShadow="false" OnClick="@(()=>form.Validate())" />
                            </MudTooltip>
                            <MudTooltip Text="Limpiar Campos y Validación">
                                <MudIconButton Icon="@Icons.Material.Rounded.ClearAll" Variant="Variant.Filled" Color="Color.Secondary" DropShadow="false" OnClick="@(()=>form.ResetAsync())" Class="mx-2" />
                            </MudTooltip>
                            <MudTooltip Text="Limpiar Validación">
                                <MudIconButton Icon="@Icons.Material.Rounded.Clear" Variant="Variant.Filled" DropShadow="false" OnClick="@(()=>{form.ResetValidation(); success = false;})" />
                            </MudTooltip>
                        </MudStack>
                        <MudStack Row="true" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center" Wrap="Wrap.Wrap">
                            <MudTooltip Text="Regresar a Projectos">
                                <MudButton Variant="Variant.Filled" Color="Color.Default" StartIcon="@Icons.Material.Rounded.Cancel" OnClick="GoToProjects">Cancelar</MudButton>
                            </MudTooltip>
                            <MudTooltip Text="Guardar Flujo de Trabajo">
                                <MudButton Variant="Variant.Filled" Color="Color.Success" Disabled="@(!success)" StartIcon="@Icons.Material.Rounded.Save" OnClick="async()=> await SaveAsync()">@saveButtonText</MudButton>
                            </MudTooltip>
                        </MudStack>
                    </MudStack>
                </MudForm>
            </MudPaper>
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudTable T="WorkFlowDto" Items="@items" Hover="true" Breakpoint="Breakpoint.Sm" @ref="mudTable"
                      FixedHeader="true" HorizontalScrollbar="true" Virtualize="true"
                      Loading="@isLoading" RowClass="cursor-pointer" LoadingProgressColor="Color.Info"
                      RowClassFunc="@SelectedRowClassFunc" OnRowClick="RowClickEvent"
                      Filter="new Func<WorkFlowDto,bool>(FilterFunc1)"
                      Elevation="3"  ContainerStyle="height:200px;">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Flujos</MudText>
                    <MudSpacer />
                    <MudTooltip Text="Buscar por Nombre">
                        <MudTextField @bind-Value="searchString1" Placeholder="Buscar ..." Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </MudTooltip>
                </ToolBarContent>
                <HeaderContent>
                    <MudTh><MudTableSortLabel SortBy="new Func<ProjectDto, object>(x => x.Name)">Nombre</MudTableSortLabel></MudTh>
                    <MudTh>Descripción</MudTh>
                    <MudTh Style="text-align:center">Acciones</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nombre">@context.Name</MudTd>
                    <MudTd DataLabel="Descripción">@context.Description</MudTd>
                    <MudTd DataLabel="Acciones">
                        <MudStack Row="true" Justify="Justify.Center" AlignItems="AlignItems.Center">
                            <MudTooltip Text="Editar Flujo de Trabajo">
                                <MudIconButton Variant="Variant.Text" Size="Size.Small" Icon="@Icons.Material.Rounded.Edit"
                                               Color="@Color.Warning" OnClick="()=>LoadWorkFlowToUpdate(context.Id)" />
                            </MudTooltip>
                            <MudTooltip Text="Eliminar Flujo de Trabajo">
                                <MudIconButton Variant="Variant.Text" Size="Size.Small" Icon="@Icons.Material.Rounded.Delete"
                                               Color="@Color.Error" OnClick="async()=> await DeleteWorkFlowAsync(context.Id, context.Name)" />
                            </MudTooltip>
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager PageSizeOptions="new int[] { 10, 25, 50, 100, int.MaxValue }"
                                   RowsPerPageString="@rowsPerPageString"
                                   InfoFormat="@infoFormat"
                                   AllItemsText="@allItemsText"
                                   HorizontalAlignment="@horizontalAlignment" />
                </PagerContent>
            </MudTable>
        </MudItem>
    </MudGrid>
</MudStack>
@code{
    bool success;
    MudForm form;

    private string saveButtonText { get; set; } = "Guardar";

    private WorkFlowDto workFlowDto { get; set; } = new();
    private int ProjectId { get; set; }


    //tabla
    private bool isLoading;

    //seleccionar una fila
    private int selectedRowNumber = -1;
    private MudTable<WorkFlowDto> mudTable;
    private List<string> clickedEvents = new();

    //buscador
    private string searchString1 = "";

    //configuracion de paginado
    private HorizontalAlignment horizontalAlignment = HorizontalAlignment.Center;
    private string rowsPerPageString = "Filas Por Página:";
    private string infoFormat = "{first_item}-{last_item} de {all_items}";
    private string allItemsText = "Todos";

    //listado de proyectos
    private IEnumerable<WorkFlowDto> items = [];

    [CascadingParameter]
    public List<BreadcrumbItem> Routes { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        GetValuesFromQueryString();
        LoadNavegationRoutes();
        await LoadWorkFlowsByProjectAsync();
    }

    private void BackToProjects()
    {
        _navigationManager.NavigateTo("/Projects/projects", false, false);
    }

    private void GetValuesFromQueryString()
    {
        var uri = _navigationManager.ToAbsoluteUri(_navigationManager.Uri);

        if(QueryHelpers.ParseQuery(uri.Query).TryGetValue("ProjectId", out var projectId))
        {
            ProjectId = int.Parse(projectId);
            workFlowDto.ProjectId = ProjectId;
        }
    }
    #region navegacion
    private void LoadNavegationRoutes()
    {
        var route = $"/WorkFlows/workflows?ProjectId={ProjectId}";
        if (!Routes.Exists(x => x.Href!.Equals(route)))
        {
            Routes.Add(new BreadcrumbItem(
                text: "Flujos de Trabajo", href: route, icon: Icons.Material.Rounded.AccountTree
            ));
        }
        else
        {
            var routeExists = Routes.Find(x => x.Href!.Equals(route));
            if (routeExists is not null)
            {
                var routeIndex = Routes.IndexOf(routeExists);
                Routes.RemoveRange(routeIndex + 1, (Routes.Count() - routeIndex) - 1);
            }
        }
    }
    #endregion
    #region crud
    private async Task SaveAsync()
    {
        saveButtonText = "Guardando...";
        //obligar la validacion de todos los campos
        await form.Validate();

        //si todos los campos estan validados
        if (form.IsValid)
        {
            if (workFlowDto.Id > 0)
            {
                await UpdateAsync();
            }
            else
            {
                await InsertAsync();
            }
        }
        saveButtonText = "Guardar";
        await Task.CompletedTask;
    }
    private async Task InsertAsync()
    {
        var response = await _workFlowService.InsertAsync(workFlowDto);
        if (response.IsSuccess)
        {
            _snackbar.Add(response.Message, Severity.Success);
            workFlowDto = new();
            workFlowDto.ProjectId = ProjectId;
            await LoadWorkFlowsByProjectAsync();
        }
        else
        {
            saveButtonText = "Guardar";
            await _customDialogService.ShowErrorDialogAsync("[CREAR FLUJO DE TRABAJO]", response.Message, response.Errors);
        }
    }
    private async Task UpdateAsync()
    {
        var response = await _workFlowService.UpdateAsync(workFlowDto.Id, workFlowDto);
        if (response.IsSuccess)
        {
            _snackbar.Add(response.Message, Severity.Success);
            workFlowDto = new();
            workFlowDto.ProjectId = ProjectId;
            await LoadWorkFlowsByProjectAsync();
        }
        else
        {
            saveButtonText = "Guardar";

            await _customDialogService.ShowErrorDialogAsync("[ACTUALIZAR FLUJO DE TRABAJO]", response.Message, response.Errors);
        }
    }
    private async Task LoadWorkFlowToUpdate(int workFlowId)
    {
        var response = await _workFlowService.GetAsync(workFlowId);
        if (response.IsSuccess)
        {
            workFlowDto = response.Data;
        }
        else
        {
            await _customDialogService.ShowErrorDialogAsync("[ENCONTRAR FLUJO DE TRABAJO]", response.Message, response.Errors);
        }
    }
    private async Task LoadWorkFlowsByProjectAsync()
    {
        isLoading = true;

        var response = await _workFlowService.GetAllByProjectAsync(ProjectId);
        if (response.IsSuccess)
        {
            items = response.Data;
        }
        else
        {
            await _customDialogService.ShowErrorDialogAsync("[MOSTRAR FLUJOS DE TRABAJOS]", response.Message, response.Errors);
        }
        isLoading = false;
    }
    private async Task DeleteWorkFlowAsync(int workFlowId, string name)
    {
        var result = await _customDialogService.ShowSimpleGenericDialogAsync("[ELIMINAR FLUJO DE TRABAJO]",
        $"¿Realmente desea eliminar el flujo de trabajo '{name}'? Este proceso no es reversible.", "Eliminar", Color.Error);
        if (result)
        {
            var response = await _workFlowService.DeleteAsync(workFlowId);
            if (response.IsSuccess)
            {
                _snackbar.Add(response.Message, Severity.Success);
                var itemlist = items.ToList();
                itemlist.RemoveAll(x => x.Id == workFlowId);
                items = itemlist.AsEnumerable();
            }
            else
            {
                await _customDialogService.ShowErrorDialogAsync("[ELIMINAR FLUJO DE TRABAJO]", response.Message, response.Errors);
            }
        }
        await Task.CompletedTask;
    }
    #endregion

    #region table

    #region seleccionar fila
    private void RowClickEvent(TableRowClickEventArgs<WorkFlowDto> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row has been clicked");
    }
    private string SelectedRowClassFunc(WorkFlowDto workFlowDto, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            clickedEvents.Add("Selected Row: None");
            return string.Empty;
        }
        else if (mudTable.SelectedItem != null && mudTable.SelectedItem.Equals(workFlowDto))
        {
            selectedRowNumber = rowNumber;
            clickedEvents.Add($"Selected Row: {rowNumber}");
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }
    #endregion

    #region buscador
    private bool FilterFunc1(WorkFlowDto workFlowDto) => FilterFunc(workFlowDto, searchString1);

    private bool FilterFunc(WorkFlowDto workFlowDto, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (workFlowDto.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (workFlowDto.Description.ToString()!.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }
    #endregion
    #endregion

    #region rutas
    private void GoToProjects()
    {
        _navigationManager.NavigateTo("/Projects/projects", false, false);
    }
    #endregion
}
