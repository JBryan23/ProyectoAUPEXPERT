@using AUPExpert.Application.DTO
@using AUPExpert.Application.DTO.Enums
@using AUPExpert.Service.WebUI.Services.Assistant
@using AUPExpert.Service.WebUI.Services.WorkFlowTasks
@using AUPExpert.Service.WebUI.ViewModels

@inject AssistantInteractiveService _assistantInteractiveService
@inject InferenceIngineService _inferenceIngineService
@inject WorkFlowTaskService _workFlowTaskService

@inject IJSRuntime JS

<style>
    .chat-box {
    height: 500px;
    padding: 10px;
    background-color: #f5f5f5;
    border-radius: 8px;
    }

    .chat-history {
    display: flex;
    flex-direction: column;
    gap: 8px;
    }

    .user-message {
    align-self: flex-end;
    background-color: #4caf50;
    color: white;
    padding: 8px 12px;
    border-radius: 12px;
    max-width: 90%;
    }

    .received-message {
    align-self: flex-start;
    background-color: #e0e0e0;
    color: black;
    padding: 8px 12px;
    border-radius: 12px;
    max-width: 90%;
    }

</style>
<script>
    function scrollToBottom(divId) {
        const div = document.getElementById(divId);
        if (div) {
            div.scrollTop = div.scrollHeight;
        }
    }
</script>
<MudDialog Style="max-width: 1000px; min-width: 70%;">
    <TitleContent>
        <MudText Align="Align.Center" Color="Color.Primary" Typo="Typo.subtitle1" Style="width: 100%;">ASISTENTE AUPEXPERT</MudText>
    </TitleContent>
    <DialogContent>
        <MudStack Class="chat-box mb-3" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack Spacing="1" Style="height: 85%;width:100%;" Class="chat-history overflow-y-scroll mt-2 pb-3 px-2" Justify="Justify.FlexStart" AlignItems="AlignItems.Start" id="scrollableDiv">
                @foreach (var message in Messages)
                {
                    if (aceptaRecomendacion && message.Text.StartsWith("--"))
                    {
                        <div class="@GetMessageClass(message)">
                            <MudText Class="mt-1" Typo="Typo.caption">@message.Text</MudText>

                            <MudStack Class="mr-1" Row="true" Justify="Justify.SpaceAround" AlignItems="AlignItems.Center">
                                <MudTooltip Text="Pasar a la siguiente actividad (no aceptar actividad)">
                                    <MudIconButton Icon="@Icons.Material.Rounded.NavigateNext" Color="Color.Primary" OnClick="async()=>await UsarAsistenteAsync()" Disabled="NoEsUltimaTareaMostrada(message.Text)" />
                                </MudTooltip>
                                <MudMenu Icon="@Icons.Material.Filled.AccountTree" Disabled="NoEsUltimaTareaMostrada(message.Text)"
                                         Color="Color.Tertiary" ActivationEvent="MouseEvent.MouseOver" TransformOrigin="Origin.TopRight"
                                         AriaLabel="Open user menu" Dense="true" MaxHeight="100" AnchorOrigin="Origin.TopCenter" Class="d-flex flex-column">
                                    @foreach (var workFlow in WorkFlows)
                                    {
                                        <MudMenuItem OnClick="()=>
                                            {
                                                Task.Run(async() => {
                                                await InsertTaskAsync(workFlow.Id, workFlow.Name);
                                                await ScrollToBottom();
                                                }).Wait(1500);
                                            }">@workFlow.Name
                                        </MudMenuItem>
                                    }
                                </MudMenu>
                            </MudStack>
                        </div>
                    }
                    else
                    {
                        <MudText Class="@GetMessageClass(message)" Align="Align.Left">@message.Text</MudText>
                    }
                }
            </MudStack>
            <MudTextField @bind-Value="@CurrentMessage" Placeholder="Escribe tu respuesta..." FullWidth="true" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.Send" OnAdornmentClick="SendMessage" AutoFocus="true" />
        </MudStack>
    </DialogContent>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    private List<ChatMessage> Messages { get; set; } = [];
    private string CurrentMessage { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<WorkFlowDto> WorkFlows { get; set; }

    [Parameter]
    public int IterationId { get; set; }

    [Parameter]
    public IEnumerable<WorkFlowTaskDto> AddedWorkFlowsTasks { get; set; } = [];

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        LoadDefaultMessages();
    }

    private void LoadDefaultMessages()
    {
        Messages.Add(new ChatMessage(
            "Bienvenido al sistema experto de recomendaciones de ISO basado en la metodología ágil AUP.",
            false
        ));
        Messages.Add(new ChatMessage(
            "Por favor, ingrese la fase del proyecto (Inicio, Elaboración, Construcción, Transición): ",
            false
        ));

    }

    private string fase = string.Empty;
    private bool faseIntroduccion;
    private bool fasePreguntas;
    private bool haPreguntado;
    private bool haInferido;
    private bool aceptaRecomendacion;
    private bool tareasRecomendadasMostradas;
    private TaskInfoViewModel tareaActual;

    private async void SendMessage()
    {
        if (!string.IsNullOrWhiteSpace(CurrentMessage))
        {
            Messages.Add(new ChatMessage(CurrentMessage, true));

            await UsarAsistenteAsync();
        }
    }

    private async Task ScrollToBottom()
    {
        await Task.Delay(30);
        await JS.InvokeVoidAsync("scrollToBottom", "scrollableDiv");
    }

    private bool NoEsUltimaTareaMostrada(string tarea)
    {
        var ultimaTarea = $"-- {tareaActual.Nombre} (Prioridad: {tareaActual.Prioridad}, Ciclo de Vida: {tareaActual.FlujoTrabajo})";
        if (!tarea.Equals(ultimaTarea)) return true;

        if (tareasRecomendadasMostradas) return true;

        return false;
    }

    private async Task UsarAsistenteAsync()
    {
        if (!faseIntroduccion)
        {
            //intruduccion
            AplicarFaseInicio();
        }
        else if(!fasePreguntas)
        {
            //recoleccion de respuestas
            AplicarFasePreguntas();
        }
        else
        {
            //motor de inferencia
            AplicarMotorInferencia();
        }
        CurrentMessage = string.Empty;
        await ScrollToBottom();
    }

    private void AplicarFaseInicio()
    {
        // Evaluando Respuesta
        var currentMessaje = CurrentMessage.ToLower();
        if (currentMessaje.Contains("inicio") ||
            currentMessaje.Contains("elaboración") ||
            currentMessaje.Contains("construcción") ||
            currentMessaje.Contains("transición")
        )
        {
            Messages.Add(new ChatMessage(
                "Se te presentarán una serie de preguntas diseñadas para identificar tus necesidades y recomendarte la norma ISO que mejor se adapta a tus objetivos. " +
                "Estas preguntas cubren aspectos clave, como el propósito de tu sistema o proceso, el sector en el que operas, y los principales desafíos o prioridades que deseas abordar. " +
                "Con base en tus respuestas, recibirás una recomendación de la norma ISO más adecuada para ayudarte a alcanzar tus metas de manera eficiente y cumplir con los estándares internacionales de calidad, seguridad, y gestión.\n",
                false));

            Messages.Add(new ChatMessage(
                $"\nFase del proyecto que has seleccionado: {CurrentMessage.ToUpper()}\n", false
            ));
            fase = currentMessaje;
            faseIntroduccion = true;
            _assistantInteractiveService.FiltrarPreguntasInteractivasSegunFase(currentMessaje);

            //inicio de primera pregunta
            AplicarFasePreguntas();
        }
        else
        {
            Messages.Add(new ChatMessage("Fase no válida. Ingrese una fase nuevamente", false));
        }
    }

    private void AplicarFasePreguntas()
    {
        if (!haPreguntado) {
            //mostrar siguiente pregunta
            var pregunta = _assistantInteractiveService.ObtenerPregunta();
            if (pregunta is null) {
                fasePreguntas = true;
                Messages.Add(new ChatMessage(
                    $"Iniciando proceso de inferencia ...", false
                    ));

                AplicarMotorInferencia();
            }
            else
            {
                Messages.Add(new ChatMessage(pregunta, false));
                haPreguntado = true;
            }
        }
        else
        {
            //analizar pregunta
            _assistantInteractiveService.AnalizarRespuesta(CurrentMessage.ToLower());
            haPreguntado = false;
            AplicarFasePreguntas();
        }
    }

    private void AplicarMotorInferencia()
    {
        if (!haInferido)
        {
            var isoRecomendadas = _inferenceIngineService.RealizarInferencia(_assistantInteractiveService.PuntajesISO);
            Messages.Add(new ChatMessage(
                "Las ISO recomendadas son: " + isoRecomendadas,
                false
            ));
            Messages.Add(new ChatMessage(
                "¿Está de acuerdo con esta recomendación y desea trabajar con estas ISO? Las actividades recomendadas serán en función de esta recomendación (si/no).",
                false
            ));
            haInferido = true;
        }
        else
        {
            if (!aceptaRecomendacion)
            {
                //trabajar con la seleccion del usuario
                if (CurrentMessage.Equals("si") || CurrentMessage.Equals("sí"))
                {
                    var error = _inferenceIngineService.FiltrarTareas(fase);
                    if (error is not null)
                    {
                        Messages.Add(new ChatMessage(
                        error,
                        false
                        ));
                        return;
                    }

                    aceptaRecomendacion = true;
                    Messages.Add(new ChatMessage(
                        "A continuación se le mostrarán cada una de las tareas recomendadas. De click en los iconos mostrados en cada actividad "+
                        "para agregar la tarea a un flujo de trabajo en la iteracion actual, o elegir otra. Las previamente agregadas no se muestran.",
                        false
                    ));

                    AplicarMotorInferencia();
                }
            }
            else
            {
                var tarea = _inferenceIngineService.ObtenerTarea();
                if(tarea is not null)
                {
                    var tareaYaAgregada = AddedWorkFlowsTasks.Where(x => x.Name.Equals(tarea.Nombre)).FirstOrDefault();

                    if (tareaYaAgregada is not null)
                    {
                        AplicarMotorInferencia();
                        return;
                    }

                    Messages.Add(new ChatMessage($"-- {tarea.Nombre} (Prioridad: {tarea.Prioridad}, Ciclo de Vida: {tarea.FlujoTrabajo})", false));
                    tareaActual = tarea;
                }
                else
                {
                    Messages.Add(new ChatMessage(
                    "A finalizado el proceso de asistencia. Si no se muestra ninguna sugerencia de actividad es porque ya las agregado todas, ¡Qué bueno que he sido útil para tí!. ¡Éxito en tu proyecto! ¡Gracias por usar el Asistente Experto de AUPExpert!",
                    false
                    ));
                    tareasRecomendadasMostradas = true;
                }
            }
        }
    }

    private async Task InsertTaskAsync(int flujoId, string name)
    {
        var workFlowTaskDto = new WorkFlowTaskDto
        {
            Name = tareaActual.Nombre,
            Description = $"Tarea creada con Asistente de AUPExpert.",
            State = WorkFlowTaskStateDto.PENDIENTE,
            Priority = EvaluarPrioridad(tareaActual.Prioridad),
            IterationId = IterationId,
            WorkFlowId = flujoId
        };

        var response = await _workFlowTaskService.InsertAsync(workFlowTaskDto);
        if (response.IsSuccess)
        {
            _snackbar.Add(response.Message, Severity.Success);
            Messages.Add(new ChatMessage(
                $"¡Tarea agregada al flujo de trabajo: {name} exitosamente!",
                false
            ));

            await UsarAsistenteAsync();
        }
        else
        {
            await _customDialogService.ShowErrorDialogAsync("[CREAR TAREA]", response.Message, response.Errors);
        }
    }

    private PriorityDto EvaluarPrioridad(string prioridad)
    {
        var prioridadCorrecta = PriorityDto.BAJA;
        switch (prioridad)
        {
            case "Baja":
                prioridadCorrecta = PriorityDto.BAJA;
                break;
            case "Media":
                prioridadCorrecta = PriorityDto.MEDIA;
                break;
            default:
                prioridadCorrecta = PriorityDto.ALTA;
                break;
        }
        return prioridadCorrecta;
    }

    private void Close() => MudDialog.Close();

    private string GetMessageClass(ChatMessage message){
        string baseClass = "d-flex justify-space-between align-center mud-elevation-1 ";

        return message.IsUser ? baseClass + "user-message" : baseClass + "received-message";
    }

    private class ChatMessage
    {
        public ChatMessage(string text, bool isUser)
        {
            Text = text;
            IsUser = isUser;
        }

        public string Text { get; }
        public bool IsUser { get; }
    }
}

