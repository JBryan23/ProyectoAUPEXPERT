@using FluentValidation.Results
<MudDialog Style="height: 400px">
    <DialogContent>
        <MudText Typo="Typo.h6">@ErrorMessage</MudText>
        
        @if(Errors is not null){
            <MudText Color="@Color.Warning" Typo="Typo.subtitle1">Listado de Errores:</MudText>
            @foreach(var error in Errors)
            {
                <MudText Color="@Color.Error" Typo="Typo.body1">@error.ErrorMessage</MudText>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Color="Color.Primary" OnClick="Ok">ACEPTAR</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public string ErrorMessage { get; set; } = string.Empty;

    [Parameter]
    public IEnumerable<ValidationFailure> Errors { get; set; }

    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    protected override Task OnInitializedAsync()
    {
        return base.OnInitializedAsync();
    }

    private void Ok() => MudDialog.Close(DialogResult.Ok(true));
}
